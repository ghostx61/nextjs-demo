{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n// import { useRouter } from 'next/router';\nimport { MongoClient, ObjectId } from 'mongodb';\nimport Head from 'next/head';\nimport { Fragment } from 'react';\nimport MeetupDetails from '../../components/meetups/MeetupDetails';\n\nfunction MeetupDetailsPage(props) {\n  // const router = useRouter();\n  // const meetupId = router.query.meetupId;\n  const meetupData = props.meetupData; // const meetupData = { id: 'm1', title: 'title', address: 'addresss', image: 'fdafda', description: 'desc' };\n\n  return /*#__PURE__*/_jsxs(Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsx(\"title\", {\n        children: meetupData.title\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"description\",\n        content: meetupData.description\n      })]\n    }), /*#__PURE__*/_jsx(MeetupDetails, {\n      id: meetupData.id,\n      title: meetupData.title,\n      address: meetupData.address,\n      description: meetupData.description,\n      image: meetupData.image\n    })]\n  });\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://admin:RVnCTJpVZV3PU5rB@cluster0.hyfvxbf.mongodb.net/meetupsDB');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetupIds = await meetupsCollection.find({}).project({\n    _id: 1\n  }).toArray();\n  client.close();\n  const paths = meetupIds.map(el => ({\n    params: {\n      meetupId: el._id.toString()\n    }\n  }));\n  console.log(paths);\n  return {\n    fallback: false,\n    paths\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId; // const meetupId = '63abf5325780cfcf72d5087a';\n\n  const client = await MongoClient.connect('mongodb+srv://admin:RVnCTJpVZV3PU5rB@cluster0.hyfvxbf.mongodb.net/meetupsDB');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  let meetupData = {\n    id: meetup._id.toString(),\n    title: meetup.title,\n    address: meetup.address,\n    image: meetup.image,\n    description: meetup.description\n  };\n  delete meetupData._id;\n  return {\n    props: {\n      meetupData\n    }\n  };\n}\nexport default MeetupDetailsPage;","map":null,"metadata":{},"sourceType":"module"}