{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/n.shantaram.hatankar/Desktop/code/Academind React course/meetup-app-nextjs/pages/meetup/[meetupId].js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// import { useRouter } from 'next/router';\nimport { MongoClient, ObjectId } from 'mongodb';\nimport MeetupDetails from '../../components/meetups/MeetupDetails';\n\nfunction MeetupDetailsPage(props) {\n  // const router = useRouter();\n  // const meetupId = router.query.meetupId;\n  // const meetupData = props.meetupData;\n  const meetupData = {\n    id: 'm1',\n    title: 'title',\n    address: 'addresss',\n    image: 'fdafda',\n    description: 'desc'\n  };\n  return /*#__PURE__*/_jsxDEV(MeetupDetails, {\n    id: meetupData.id,\n    title: meetupData.title,\n    address: meetupData.addresss,\n    description: meetupData.descrition,\n    image: meetupData.image\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  // const client = await MongoClient.connect('mongodb+srv://admin:RVnCTJpVZV3PU5rB@cluster0.hyfvxbf.mongodb.net/meetupsDB');\n  // const db = client.db();\n  // const meetupsCollection = db.collection('meetups');\n  // const meetupIds = meetupsCollection.find({}, { _id: 1 });\n  // console.log(meetupIds);\n  // client.close();\n  // const paths = meetupIds.map(id => ({\n  //     params: {\n  //         meetupId: id.toString()\n  //     }\n  // }));\n  return {\n    fallback: false,\n    // paths,\n    paths: [{\n      params: {\n        meetupId: \"m1\"\n      }\n    }]\n  };\n}\nexport async function getStaticProps(context) {\n  // const meetupId = context.params.meetupId;\n  const meetupId = \"63abf5325780cfcf72d5087a\";\n  const client = await MongoClient.connect('mongodb+srv://admin:RVnCTJpVZV3PU5rB@cluster0.hyfvxbf.mongodb.net/meetupsDB');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n\n  const meetupData1 = _objectSpread(_objectSpread({}, meetup), {}, {\n    id: meetup._id.toString()\n  });\n\n  console.log(meetupData1);\n  const meetupData = {\n    id: 'm1',\n    title: 'title',\n    address: 'addresss',\n    image: 'fdafda',\n    description: 'desc'\n  };\n  return {\n    props: {\n      meetupData\n    }\n  };\n}\nexport default MeetupDetailsPage;","map":{"version":3,"sources":["/Users/n.shantaram.hatankar/Desktop/code/Academind React course/meetup-app-nextjs/pages/meetup/[meetupId].js"],"names":["MongoClient","ObjectId","MeetupDetails","MeetupDetailsPage","props","meetupData","id","title","address","image","description","addresss","descrition","getStaticPaths","fallback","paths","params","meetupId","getStaticProps","context","client","connect","db","meetupsCollection","collection","meetup","findOne","_id","meetupData1","toString","console","log"],"mappings":";;;;;;;;;AAAA;AACA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AACA,OAAOC,aAAP,MAA0B,wCAA1B;;AAEA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAC9B;AACA;AACA;AACA,QAAMC,UAAU,GAAG;AAAEC,IAAAA,EAAE,EAAE,IAAN;AAAYC,IAAAA,KAAK,EAAE,OAAnB;AAA4BC,IAAAA,OAAO,EAAE,UAArC;AAAiDC,IAAAA,KAAK,EAAE,QAAxD;AAAkEC,IAAAA,WAAW,EAAE;AAA/E,GAAnB;AACA,sBACI,QAAC,aAAD;AACI,IAAA,EAAE,EAAEL,UAAU,CAACC,EADnB;AAEI,IAAA,KAAK,EAAED,UAAU,CAACE,KAFtB;AAGI,IAAA,OAAO,EAAEF,UAAU,CAACM,QAHxB;AAII,IAAA,WAAW,EAAEN,UAAU,CAACO,UAJ5B;AAKI,IAAA,KAAK,EAAEP,UAAU,CAACI;AALtB;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;;AAED,OAAO,eAAeI,cAAf,GAAgC;AACnC;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAO;AACHC,IAAAA,QAAQ,EAAE,KADP;AAEH;AACAC,IAAAA,KAAK,EAAE,CACH;AACIC,MAAAA,MAAM,EAAE;AACJC,QAAAA,QAAQ,EAAE;AADN;AADZ,KADG;AAHJ,GAAP;AAWH;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC1C;AACA,QAAMF,QAAQ,GAAG,0BAAjB;AACA,QAAMG,MAAM,GAAG,MAAMpB,WAAW,CAACqB,OAAZ,CAAoB,6EAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMC,MAAM,GAAG,MAAMF,iBAAiB,CAACG,OAAlB,CAA0B;AAAEC,IAAAA,GAAG,EAAE1B,QAAQ,CAACgB,QAAD;AAAf,GAA1B,CAArB;;AACA,QAAMW,WAAW,mCAAQH,MAAR;AAAgBnB,IAAAA,EAAE,EAAEmB,MAAM,CAACE,GAAP,CAAWE,QAAX;AAApB,IAAjB;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ;AACA,QAAMvB,UAAU,GAAG;AAAEC,IAAAA,EAAE,EAAE,IAAN;AAAYC,IAAAA,KAAK,EAAE,OAAnB;AAA4BC,IAAAA,OAAO,EAAE,UAArC;AAAiDC,IAAAA,KAAK,EAAE,QAAxD;AAAkEC,IAAAA,WAAW,EAAE;AAA/E,GAAnB;AACA,SAAO;AACHN,IAAAA,KAAK,EAAE;AACHC,MAAAA;AADG;AADJ,GAAP;AAKH;AAED,eAAeF,iBAAf","sourcesContent":["// import { useRouter } from 'next/router';\nimport { MongoClient, ObjectId } from 'mongodb';\nimport MeetupDetails from '../../components/meetups/MeetupDetails';\n\nfunction MeetupDetailsPage(props) {\n    // const router = useRouter();\n    // const meetupId = router.query.meetupId;\n    // const meetupData = props.meetupData;\n    const meetupData = { id: 'm1', title: 'title', address: 'addresss', image: 'fdafda', description: 'desc' };\n    return (\n        <MeetupDetails\n            id={meetupData.id}\n            title={meetupData.title}\n            address={meetupData.addresss}\n            description={meetupData.descrition}\n            image={meetupData.image}\n        />\n    );\n}\n\nexport async function getStaticPaths() {\n    // const client = await MongoClient.connect('mongodb+srv://admin:RVnCTJpVZV3PU5rB@cluster0.hyfvxbf.mongodb.net/meetupsDB');\n    // const db = client.db();\n\n    // const meetupsCollection = db.collection('meetups');\n    // const meetupIds = meetupsCollection.find({}, { _id: 1 });\n    // console.log(meetupIds);\n    // client.close();\n    // const paths = meetupIds.map(id => ({\n    //     params: {\n    //         meetupId: id.toString()\n    //     }\n    // }));\n    return {\n        fallback: false,\n        // paths,\n        paths: [\n            {\n                params: {\n                    meetupId: \"m1\"\n                }\n            }\n        ]\n    };\n}\n\nexport async function getStaticProps(context) {\n    // const meetupId = context.params.meetupId;\n    const meetupId = \"63abf5325780cfcf72d5087a\";\n    const client = await MongoClient.connect('mongodb+srv://admin:RVnCTJpVZV3PU5rB@cluster0.hyfvxbf.mongodb.net/meetupsDB');\n    const db = client.db();\n\n    const meetupsCollection = db.collection('meetups');\n    const meetup = await meetupsCollection.findOne({ _id: ObjectId(meetupId) });\n    const meetupData1 = { ...meetup, id: meetup._id.toString() };\n    console.log(meetupData1);\n    const meetupData = { id: 'm1', title: 'title', address: 'addresss', image: 'fdafda', description: 'desc' };\n    return {\n        props: {\n            meetupData,\n        },\n    };\n}\n\nexport default MeetupDetailsPage;\n"]},"metadata":{},"sourceType":"module"}